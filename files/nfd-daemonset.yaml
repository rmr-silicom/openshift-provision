---

apiVersion: v1
kind: Namespace
metadata:
  name: nfd # NFD namespace

---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: nfd-sa
  namespace: nfd

---

apiVersion: security.openshift.io/v1
kind: SecurityContextConstraints
metadata:
  name: scc-nfd
  namespace: nfd
allowPrivilegedContainer: true
allowHostDirVolumePlugin: true
runAsUser:
  type: RunAsAny
seLinuxContext:
  type: RunAsAny
fsGroup:
  type: RunAsAny
supplementalGroups:
  type: RunAsAny
users:
- system:serviceaccount:nfd:nfd-sa

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  # "namespace" omitted since ClusterRoles are not namespaced
  name: nfd-master
rules:
- apiGroups:
  - ""
  resources:
  - nodes
# when using command line flag --resource-labels to create extended resources
# you will need to uncomment "- nodes/status"
# - nodes/status
  verbs:
  - get
  - patch
  - update
  # List only needed for --prune
  - list

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: nfd-master
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: nfd-master
subjects:
- kind: ServiceAccount
  name: nfd-sa
  namespace: nfd

---

apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels:
    app: nfd
  name: nfd
  namespace: nfd
spec:
  selector:
    matchLabels:
      app: nfd
  template:
    metadata:
      labels:
        app: nfd
    spec:
      serviceAccountName: nfd-sa
      containers:
        - env:
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          image: quay.io/ryan_raasch/node-feature-discovery:v0.6.0-351-g24625d3-minimal
          imagePullPolicy: Always
          name: nfd-master
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop: ["ALL"]
            readOnlyRootFilesystem: true
            runAsNonRoot: true
          command:
            - "nfd-master"
        - env:
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          image: quay.io/ryan_raasch/node-feature-discovery:v0.6.0-351-g24625d3-minimal
          imagePullPolicy: Always
          name: nfd-worker
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop: ["ALL"]
            readOnlyRootFilesystem: true
            runAsNonRoot: true
          command:
            - "nfd-worker"
          args:
            - "--sleep-interval=60s"
          volumeMounts:
            - name: host-boot
              mountPath: "/host-boot"
              readOnly: true
            - name: host-os-release
              mountPath: "/host-etc/os-release"
              readOnly: true
            - name: host-sys
              mountPath: "/host-sys"
              readOnly: true
            - name: source-d
              mountPath: "/etc/kubernetes/node-feature-discovery/source.d/"
              readOnly: true
            - name: features-d
              mountPath: "/etc/kubernetes/node-feature-discovery/features.d/"
              readOnly: true
            - name: nfd-worker-conf
              mountPath: "/etc/kubernetes/node-feature-discovery"
              readOnly: true
## Example for more custom configs in an additional configmap (1/3)
## Mounting into subdirectories of custom.d makes it easy to use multiple configmaps
#            - name: custom-source-extra-rules
#              mountPath: "/etc/kubernetes/node-feature-discovery/custom.d/extra-rules-1"
#              readOnly: true
      volumes:
        - name: host-boot
          hostPath:
            path: "/boot"
        - name: host-os-release
          hostPath:
            path: "/etc/os-release"
        - name: host-sys
          hostPath:
            path: "/sys"
        - name: source-d
          hostPath:
            path: "/etc/kubernetes/node-feature-discovery/source.d/"
        - name: features-d
          hostPath:
            path: "/etc/kubernetes/node-feature-discovery/features.d/"
        - name: nfd-worker-conf
          configMap:
            name: nfd-worker-conf
## Example for more custom configs in an additional configmap (2/3)
#        - name: custom-source-extra-rules
#          configMap:
#            name: custom-source-extra-rules
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nfd-worker-conf
  namespace: nfd
data:
  nfd-worker.conf: | ### <NFD-WORKER-CONF-START-DO-NOT-REMOVE>
    sources:
       custom:
         - name: "fpga.intel.com/network-accelerator-n5010"
           matchOn:
             - pciId :
                 vendor: ["1c2c"]
                 device: ["1000"]

         - name: "fpga.intel.com/network-accelerator-n5011"
           matchOn:
             - pciId :
                 vendor: ["1c2c"]
                 device: ["1001"]

         - name: "silicom.fpga.n5012"
           matchOn:
             - pciId :
                 vendor: ["1c2c"]
                 device: ["1002"]
### <NFD-WORKER-CONF-END-DO-NOT-REMOVE>
---
## Example for more custom configs in an additional configmap (3/3)
#apiVersion: v1
#kind: ConfigMap
#metadata:
#  name: custom-source-extra-rules
#  namespace: nfd
#data:
## Filename doesn't matter, and there can be multiple. They just need to be unique.
#  custom.conf: |
#    - name: "more.kernel.features"
#      matchOn:
#      - loadedKMod: ["example_kmod3"]
#    - name: "more.features.by.nodename"
#      value: customValue
#      matchOn:
#      - nodename: ["special-.*-node-.*"]
